<?php
// Q1 変数と文字列
$name = '菅野';
echo '私の名前は「' . $name . '」です。';

/* [ask]
シングルの他にダブルクオートで囲っても文字列として表示できると思います！
それぞれのメリット・デメリットを教えていただきたいです！
*/

/* 解答
○"(ダブルクォーテーション)
メリット：変数と特殊文字が展開されるため、文字列連結をした際の可読性が高いです。
デメリット：変数と特殊文字の変換処理を行うため、シングルクォーテーションより処理速度が遅くなります。
○'(シングルクォーテーション)
メリット：変数と特殊文字を展開しないため処理速度が速い
デメリット：クォーテーション内にある文字全てを文字列として認識してしまうため、 シングルクォーテーションの中に変数を書いてもその中身を反映してくれず、変数名が文字列になってしまいます。
*/

// Q2 四則演算
$num = 5 * 4;
echo $num . "\n";
$num /= 2;
echo $num;

// Q3 日付操作
date_default_timezone_set('Asia/Tokyo');
echo '現在時刻は、' . date('Y年m月d日 H時i分s秒') . 'です。';

/* [ask]
実行すると現在時刻が表示されましたか？
*/

/* 解答
時刻以下の表示が異なっていましたので、date_default_timezone_set()関数を使用して東京のタイムゾーンに変更いたしました。
*/

// Q4 条件分岐-1 if文
$device = 'windows';
if ($device === 'windows' || $device === 'mac') {
  echo "使用OSは、{$device}です。";
} else {
  echo 'どちらでもありません。';
}

/* [info]
ネストがある時はネストが減らせるかを検討することが大事です！
19行目と21行目は表示する内容が似ていると思いますが、違う点はどこでしょうか？
*/

// Q5 条件分岐-2 三項演算子
$age = 18;
$message = ($age >= 18) ? '成人です。' : '未成年です。';
echo $message;

/* [ask]
三項演算子を使うメリットを教えていただきたいです！
*/

/* 解答
変数の宣言と式の展開を同時にできるため、if文に比べて記述量が少なくて済むというメリットがあります。
*/

// Q6 配列
$prefecture = ['茨城県', '栃木県', '群馬県', '埼玉県', '千葉県', '東京都', '神奈川県'];
echo $prefecture[2] . 'と' . $prefecture[3] . 'は関東地方の都道府県です。';

/* [ask]
添え字に2, 3を指定するとなぜ要素の3・4番目が表示されるのでしょうか？
*/

/* 解答
配列のインデックス番号が0~始まるため、3番目の要素を表示させたい場合は0,1,2で数えて2を指定すると、3番目の要素を表示させることができます。
*/

// Q7 連想配列-1
$areas = [
  '東京都' => '新宿区',
  '神奈川県' => '横浜市',
  '千葉県' => '千葉市',
  '埼玉県' => 'さいたま市',
  '栃木県' => '宇都宮市',
  '群馬県' => '前橋市',
  '茨城県' => '水戸市'
];

foreach ($areas as $area) {
  echo $area . "\n";
}

// Q8 連想配列-2
foreach ($areas as $prefecture => $capital) {
  if ($prefecture === '埼玉県') {
    echo $prefecture . 'の県庁所在地は、' . $capital . 'です';
  }
}

/* [ask]
==ではなく、===を使用した理由はなんでしょうか？
*/

/* 解答
== による緩やかな比較で意図しない結果を出さないために使用いたしました
*/

// Q9 連想配列-3
$areas['宮城県'] = '仙台市';
$areas['愛知県'] = '名古屋市';

$kantoPrefectures = ['東京都', '神奈川県', '千葉県', '埼玉県', '栃木県', '群馬県', '茨城県'];

foreach ($areas as $prefecture => $capital) {
  if (in_array($prefecture, $kantoPrefectures)) {
    echo $prefecture . 'の県庁所在地は、' . $capital . 'です。' . "\n";
  } else {
    echo $prefecture . 'は関東地方ではありません。' . "\n";
  }
}

/* [nits]
PHPでは、変数はローワーキャメルケースで記載してください！
*/

/* 解答
変数名を修正いたしました。
*/

/* [ask]
言語ごとコーディング規約というものがありますが、規約を守るメリットを教えていただきたいです！
*/

/* 解答
コーディング規約を守ってコードの書き方を統一すると、コードに一貫性がうまれ可読性があがるメリットがあります。
*/

/* [ask]
in_arrayを使うことで可読性が上がっていますね。
in_arrayのように元々使用できる関数のことをなんと言いますか？
*/

/* 解答
PHPが予め用意している、「ビルドイン関数(組み込み関数)」と言います。
ビルドイン関数は文字列処理、数値処理、ファイル操作、データベース操作などの機能が予め備わっており、インストールや設定をせずとも利用できるメリットがあります。
【例】
strlen：文字列の長さを計測する
mt_rand：乱数を設定する
array_merge：配列を連結させる
*/

// Q10 関数-1
function hello($name)
{
  echo $name . 'さん、こんにちは。' . "\n";
}
hello('菅野');
hello('辻');

/* [nits]
問題文に文字列を返すように指定されているので、文字列は返してください！
*/

/* 解答
echoではなく、値を関数の呼び出し元に返すreturnに修正いたしました。
*/

/* [ask]
外から値を渡すことのできる引数を使用することでどのようなメリットがありますか？
*/

/* 解答
外部から値を渡すことで、同じ関数を異なる値で呼び出すことができるメリットがあります。
*/

// Q11 関数-2
function calcTaxInPrice($price)
{
  $taxInPrice = $price * 1.1;
  return $taxInPrice;
}
$price = 1000;
echo $price . '円の商品の税込価格は' . calcTaxInPrice($price) . '円です。';

/* [ask]
一行で書くことできるでしょうか？
また、変数に代入しないことで生じるメリット・デメリットはなんでしょうか？
*/

/* 解答
以下のように一行で書くことができます。
return $price * 1.1;
メリット：コードがシンプルになるため、可読性が向上します。
デメリット：計算結果を変数に格納しないと、処理結果の値がほかの場所で再利用性できなくなることや、直接リターンをしてしまうと、途中で変数を値を確認したい場合にデバックがしづらくなくデメリットがあります。
*/

// Q12 関数とif文
function distinguishNum($num)
{
  if ($num % 2 === 0) {
    echo $num . 'は偶数です。' . "\n";
  } else {
    echo $num . 'は奇数です。' . "\n";
  }
}

$num = 11;
distinguishNum($num);
$num = 24;
distinguishNum($num);

/* [nits]
文字列を返してください！
*/

/* 解答
echoではなく、値を関数の呼び出し元に返すreturnに修正いたしました。
*/

/* [ask]
ifの条件を奇数であるという条件にもできたと思いますが、なぜあえて偶数の条件にしたのでしょうか？
*/

/* 解答
直感的に条件を理解しやすいかと思い、偶数を使用しました。
*/

// Q13 関数とswitch文
function evaluateGrade($result)
{
  switch ($result) {
    case 'A':
    case 'B':
      return '合格です。' . "\n";
    case 'C':
      return '合格ですが追加課題があります。' . "\n";
    case 'D':
      return '不合格です。' . "\n";
    default:
      return '判定不明です。講師に問い合わせてください。' . "\n";
  }
}

$result = 'A';
evaluateGrade($result);
$result = 'E';
evaluateGrade($result);

/* [nits]
文字列で返してください！
*/

/* 解答
echoではなく、値を関数の呼び出し元に返すreturnに修正いたしました。
またreturnで処理が終了するため、break;の記述は削除いたしました。
*/

/* [ask]
switch文はif文にも置き換えることができますが、どのような時にswitch文を使うべきでしょうか？
また、switch文を使う際のデメリットを教えていただきたいです！
*/

/* 解答
Switch文は、同じ変数に対して複数の値をチェックする場合や、条件に使用する特定の値が明確な場合は、switch文を使用するべきだと思います。
デメリットとしては、特定の値との比較になるため、比較対象となる値が整数や文字列に限定されることが多く、浮動小数点数や複雑なデータ型との比較には向いていないことがあげられます。
*/

?>